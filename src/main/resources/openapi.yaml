openapi: 3.0.1
info:
  title: TIENDA ONLINE
  description: Es una aplicacion basada en vender productos
  contact:
    name: Juan Daniel Smith Olivera
    email: juancin3636@gamil.com
  version: 1.0.0
servers:
  - url: 'http://localhost:8080'
    description: Generated server url
security:
  - SecurityToken: []
paths:
  '/api/v1.0/storage/update/{file}':
    put:
      tags:
        - upload-controller
      operationId: updateFile
      parameters:
        - name: file
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
              format: byte
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: string
  '/api/v1.0/products/{id}':
    get:
      tags:
        - Products API
      summary: Get a product by id
      description: Returns a product as per the id
      operationId: findById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successfully retrieved
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Product'
        '401':
          description: Unauthorization
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Product'
        '403':
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Not found - The product was not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Product'
        '500':
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Product'
    put:
      tags:
        - Products API
      operationId: updateProduct
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductUpdateParams'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ProductDto'
    delete:
      tags:
        - Products API
      operationId: deleteById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
  '/api/v1.0/orders/{id}':
    get:
      tags:
        - order-controller
      operationId: findById_1
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Order'
    put:
      tags:
        - order-controller
      operationId: updateOrder
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderUpdateParams'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/OrderDto'
    delete:
      tags:
        - order-controller
      operationId: deleteByIdOrder
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
  /api/v1.0/storage/upload:
    post:
      tags:
        - upload-controller
      operationId: upload
      requestBody:
        content:
          application/json:
            schema:
              required:
                - file
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: string
  /api/v1.0/products:
    get:
      tags:
        - Products API
      operationId: findAllProducts
      parameters:
        - name: keyword
          in: query
          required: false
          schema:
            type: string
        - name: offset
          in: query
          required: true
          schema:
            type: integer
            format: int32
        - name: limit
          in: query
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductDto'
    post:
      tags:
        - Products API
      operationId: saveProduct
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductDto'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ProductDto'
  /api/v1.0/auth/login:
    post:
      tags:
        - auth-controller
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: string
  /api/v1.0/products/name-product:
    get:
      tags:
        - Products API
      operationId: findByNameProduct
      parameters:
        - name: nameProduct
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Product'
  /api/v1.0/orders:
    get:
      tags:
        - order-controller
      operationId: findAllOrders
      parameters:
        - name: offset
          in: query
          required: true
          schema:
            type: integer
            format: int32
        - name: limit
          in: query
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrderDto'
  '/api/v1.0/storage/{filename}':
    delete:
      tags:
        - upload-controller
      operationId: removeFile
      parameters:
        - name: filename
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: boolean
components:
  schemas:
    ProductUpdateParams:
      type: object
      properties:
        nameProduct:
          type: string
        brandProduct:
          type: string
        descriptionProduct:
          type: string
        priceProduct:
          type: number
          format: float
        imageProduct:
          type: string
        amount:
          type: integer
          format: int32
    ProductDto:
      required:
        - nameProduct
      type: object
      properties:
        id:
          type: integer
          format: int64
        nameProduct:
          type: string
        brandProduct:
          type: string
        descriptionProduct:
          type: string
        priceProduct:
          type: number
          format: float
        imageProduct:
          type: string
        amount:
          type: integer
          format: int32
    OrderUpdateParams:
      type: object
      properties:
        number:
          type: string
        creationDate:
          type: string
          format: date-time
        dateReceived:
          type: string
          format: date-time
        total:
          type: number
          format: float
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
        number:
          type: string
        name:
          type: string
        creationDate:
          type: string
          format: date-time
        dateReceived:
          type: string
          format: date-time
        amount:
          type: integer
          format: int32
        price:
          type: number
        total:
          type: number
          format: float
        userEntity:
          $ref: '#/components/schemas/UserEntity'
        product:
          $ref: '#/components/schemas/Product'
    OrderDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        number:
          type: string
        creationDate:
          type: string
          format: date-time
        dateReceived:
          type: string
          format: date-time
        total:
          type: number
          format: float
        userDto:
          $ref: '#/components/schemas/UserDto'
        product:
          $ref: '#/components/schemas/Product'
    Product:
      type: object
      properties:
        id:
          type: integer
          format: int64
        nameProduct:
          type: string
        brandProduct:
          type: string
        descriptionProduct:
          type: string
        priceProduct:
          type: number
          format: float
        imageProduct:
          type: string
        amount:
          type: integer
          format: int32
        userEntity:
          $ref: '#/components/schemas/UserEntity'
    Role:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        users:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/UserEntity'
    UserDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        username:
          type: string
    UserEntity:
      required:
        - username
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        username:
          maxLength: 50
          minLength: 0
          type: string
        password:
          type: string
        email:
          maxLength: 80
          minLength: 0
          type: string
        address:
          type: string
        phone:
          type: string
        type:
          type: string
        productList:
          type: array
          items:
            $ref: '#/components/schemas/Product'
        orderList:
          type: array
          items:
            $ref: '#/components/schemas/Order'
        roles:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/Role'
    UserLogin:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
  securitySchemes:
    SecurityToken:
      type: http
      description: Access Token For My API
      name: Authorization
      in: header
      scheme: bearer
      bearerFormat: JWT
